#–ë–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π - @Andromaradbot

import asyncio
import logging
import sys
from os import getenv
from typing import Any, Dict
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)


from find import find_by_filter
from x import data_json

week = ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞')

keyboard_to_menu = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ú–µ–Ω—é üî∑")]], resize_keyboard=True)

TOKEN = "1521154065:AAEakIbgTMEDM0craYEgn_t8pMkNJl4aowI"
form_router = Router()


class Find(StatesGroup):
    mode = State()
    info_teacher = State()
    info_classroom = State()
    choose_teacher = State()
    choose_classroom = State()


@form_router.message(F.text == "–ú–µ–Ω—é üî∑")
@form_router.message(CommandStart())
async def process_mode(message: Message, state: FSMContext) -> None:
    await state.set_state(Find.mode)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"),
                    # KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –∫–∞–±–∏–Ω–µ—Ç—É"),
                ]
            ],
            resize_keyboard=True,
        ),
    )


@form_router.message(Find.mode, F.text.lower() == "–ø–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
async def process_get_teacher(message: Message, state: FSMContext) -> None:
    await state.update_data(mode="teacher")
    await state.set_state(Find.info_teacher)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard_to_menu,
    )


@form_router.message(Find.info_teacher)
async def process_teachers(message: Message, state: FSMContext) -> None:
    info = message.text
    data = await state.get_data()

    variants, matched_lessons = find_by_filter(data_json, data['mode'], info)
    if len(variants) == 0:
        await state.clear()
        await message.answer(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=keyboard_to_menu,
        )
    elif len(variants) > 20:
        await state.clear()
        await message.answer(
            "–°–∫–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞—à–ª–æ—Å—å.",
            reply_markup=keyboard_to_menu,
        )
    elif len(variants) > 1:
        await state.update_data(variants=variants, lessons=matched_lessons)
        await state.set_state(Find.choose_teacher)
        answer = f"–ù–∞–π–¥–µ–Ω–æ {len(variants)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n\n"
        formatted_variants = [f"{i}. {t}" for i, t in enumerate(variants, start=1)]
        answer += '\n'.join(formatted_variants)
        await message.answer(
            answer,
            reply_markup=keyboard_to_menu,
        )
        await message.answer(
            "–ö–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å?",
            reply_markup=keyboard_to_menu,
        )
    else:
        data = await state.update_data(variants=variants, lessons=matched_lessons)
        await state.clear()
        await text_teachers(message, data)


@form_router.message(Find.choose_teacher)
async def process_choose_teacher(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    variants = data["variants"]
    matched_lessons = data["lessons"]
    choose = int(message.text) - 1
    var = variants[choose]
    lessons = [lesson for lesson in matched_lessons if lesson["teacher"] == var]
    data = await state.update_data(variants=variants, lessons=lessons)
    await state.clear()
    await text_teachers(message, data)


async def text_teachers(message: Message, data):
    lessons = data["lessons"]
    lessons.sort(key=lambda les: (week.index(les['day']), les['lesson_n']))

    for day_name in week:
        lessons_day = [lesson for lesson in lessons if lesson["day"] == day_name]
        if lessons_day:
            answer = day_name + "\n"
            for l in lessons_day:
                answer += f'{l["lesson_n"]}| {l["classroom"]:6} | {l["group"]:8} | {l["subject"]} {l["mode"]}'
                if l["type"] == "—á–∏—Å–ª–∏—Ç–µ–ª—å":
                    answer += " –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—è–º\n"
                elif l["type"] == "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å":
                    answer += " –ø–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è–º\n"
                else:
                    answer += "\n"
            await message.answer(
                answer,
                reply_markup=keyboard_to_menu,
            )


async def main():
    bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(form_router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
